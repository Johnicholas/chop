input (int, int, int) PICKUP;
input (int, int, int) DROPOFF;
input (int, int, int) MOVE;
input (int, int) BEFORE;
input int DONE_CONFIG;
input void START;
input int TICK;

data Command with
    tag NOTHING;
or
    tag SEQUENCE with
        var Command one;
        var Command two;
    end
or
    tag MOVE with
        var int truck;
        var int from;
        var int to;
    end
or
    tag PICKUP with
        var int truck;
        var int parcel;
        var int location;
    end
or
    tag DROPOFF with
        var int truck;
        var int parcel;
        var int location;
    end
end

class Move with
  var int truck;
  var int from;
  var int to;
do
  _printf("move(%d, %d, %d) is starting\n", truck, from, to);
  // var int id = await TICK until id == name; 
  _printf("move(%d, %d, %d) is done\n", truck, from, to);
end

class Pickup with
  var int truck;
  var int parcel;
  var int location;
do
  _printf("pickup(%d, %d, %d) is starting\n", parcel, truck, location);
  // var int id = await TICK until id == name; 
  _printf("pickup(%d, %d, %d) is done\n", parcel, truck, location);
end

class Dropoff with
  var int truck;
  var int parcel;
  var int location;
do
  _printf("dropoff(%d, %d, %d) is starting\n", parcel, truck, location);
  // var int id = await TICK until id == name; 
  _printf("dropoff(%d, %d, %d) is done\n", parcel, truck, location);
end

pool Command[] cmds = new Command.NOTHING();

par/or do
  await START;
with
  loop do
    var int truck;
    var int from;
    var int to;
    (truck, from, to) = await MOVE;
    _printf("Saw move %d %d %d\n", truck, from, to);
    traverse cmd in &&cmds do
      if cmd:NOTHING then
        cmds = new Command.SEQUENCE(Command.MOVE(truck, from, to), Command.NOTHING());
      else/if cmd:SEQUENCE then
        if cmd:SEQUENCE.two.NOTHING then
          cmd:SEQUENCE.two = new Command.SEQUENCE(Command.MOVE(truck, from, to), Command.NOTHING());
        else
          traverse &&cmd:SEQUENCE.two;
        end
      end
    end
  end
with
  loop do
    var int truck;
    var int parcel;
    var int location;
    (truck, parcel, location) = await PICKUP;
    _printf("Saw pickup %d %d %d\n", truck, parcel, location);
    traverse cmd in &&cmds do
      if cmd:NOTHING then
        cmds = new Command.SEQUENCE(Command.PICKUP(truck, parcel, location), Command.NOTHING());
      else/if cmd:SEQUENCE then
        if cmd:SEQUENCE.two.NOTHING then
          cmd:SEQUENCE.two = new Command.SEQUENCE(Command.PICKUP(truck, parcel, location), Command.NOTHING());
        else
          traverse &&cmd:SEQUENCE.two;
        end
      end
    end
  end
with
  loop do
    var int truck;
    var int parcel;
    var int location;
    (truck, parcel, location) = await DROPOFF;
    _printf("Saw dropoff %d %d %d\n", truck, parcel, location);
    traverse cmd in &&cmds do
      if cmd:NOTHING then
        cmds = new Command.SEQUENCE(Command.DROPOFF(truck, parcel, location), Command.NOTHING());
      else/if cmd:SEQUENCE then
        if cmd:SEQUENCE.two.NOTHING then
          cmd:SEQUENCE.two = new Command.SEQUENCE(Command.DROPOFF(truck, parcel, location), Command.NOTHING());
        else
          traverse &&cmd:SEQUENCE.two;
        end
      end
    end
  end
end

traverse cmd in &&cmds do
  watching *cmd do
    //if cmd:NOTHING then
      //nothing;
    if cmd:PICKUP then
      do Pickup with
        this.truck = cmd:PICKUP.truck;
        this.parcel = cmd:PICKUP.parcel;
        this.location = cmd:PICKUP.location;
      end;
    else/if cmd:DROPOFF then
      do Dropoff with
        this.truck = cmd:DROPOFF.truck;
        this.parcel = cmd:DROPOFF.parcel;
        this.location = cmd:DROPOFF.location;
      end;
    else/if cmd:MOVE then
      do Move with
        this.truck = cmd:MOVE.truck;
        this.from = cmd:MOVE.from;
        this.to = cmd:MOVE.to;
      end;
    else/if cmd:SEQUENCE then
      traverse &&cmd:SEQUENCE.one;
      traverse &&cmd:SEQUENCE.two;
    else
      _printf("not implemented!\n");
    end
  end
end

escape 0;
